#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../lib/app").default;
var debug = require("debug")("js:server");
var http = require("http");
var fs = require("fs");
var path = require("path");
const assert = require('assert').strict;
const { PORT } = require("../lib/config");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(PORT);
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function() {
    if (typeof port === "string") {
        fs.chmodSync(port, 0o666)
    }
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    assert (val.startsWith("/tmp/"));
    if (fs.existsSync(PORT)) {
        fs.unlinkSync(PORT);
    } else if (!fs.existsSync(path.dirname(PORT))) {
        fs.mkdirSync(path.dirname(PORT), { mode: 0o755 });
    }
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      // eslint-disable-next-line no-unreachable
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      // eslint-disable-next-line no-unreachable
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address();
  var bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
